Managing Processes

Objectives
In this lab, you will:

Create a new log file for process listings
Use the top command
Establish a repetitive task that runs your previous auditing commands once a day
AWS service restrictions
In this lab environment, access to AWS services and service actions might be restricted to the ones that are needed to complete the lab instructions. You might encounter errors if you attempt to access other services or perform actions beyond the ones that are described in this lab.

 

Accessing the AWS Management Console


Task 1: Use SSH to connect to an Amazon Linux EC2 instance
 
Open a terminal window, and change directory cd to the directory where the labsuser.pem file was downloaded. For example, if the labuser.pem file was saved to your Downloads directory, run this command:

cd ~/Downloads
Change the permissions on the key to be read-only, by running this command:

chmod 400 labsuser.pem
Run the below command (replace <public-ip> with the PublicIP address you copied earlier).
Alternatively, return to the EC2 Console and select Instances. Check the box next to the instance you want to connect to and in the Description tab copy the IPv4 Public IP value.:

ssh -i labsuser.pem ec2-user@<public-ip>
Type yes when prompted to allow the first connection to this remote SSH server.
Because you are using a key pair for authentication, you will not be prompted for a password.


 

Task 2: Exercise - Create List of Processes
In this exercise, you will create a log file from the ps command. This log file should be added to the SharedFolders section:

Create a log file named processes.csv from ps -aux and omit any processes that contain root user or contain "["or"]" in the COMMAND section.

Note:
There is a space following the command followed by a period to represent the current location.

To validate that you are in the /home/ec2-user/companyA folder, enter pwd and press Enter. 

If you are not in this folder, enter cd companyA and press Enter.

View all processes running on the machine and filter out the word root by typing sudo ps -aux | grep -v root | sudo tee SharedFolders/processes.csv and pressing ENTER.

Validate your work by typing cat SharedFolders/processes.csv and pressing ENTER.

 

The console displays output from sudo ps -aux | grep -v root | sudo tee SharedFolders/processes.csv

Figure: The command sudo ps -aux | grep -v root | sudo tee SharedFolders/processes.csv shows all the current proccesses running on your machine. This is also validated by using the command cat SharedFolders/processes.csv.

 

Task 3: Exercise - List the processes using the top command
In this exercise, you will use the top command:

Run the top command to display processes and threads that are active in the system.
Observe the outputs of the top command.
In the main terminal run the command top and press ENTER:

top
The top command is used to display the system performance and lists the processes and threads active in the system. The output of the top command should look similar to the picture below:

 

The terminal windows shows the output from the top command. The output shown is the number of tasks total, CPU usage, and memory total.

Figure: The output of the top command gives the system performance and gives you the following information: Total number of tasks, how many are running, how many are sleeping, how many are stopped, zombie state. It gives the percentage of CPU used, the KiB memory used, and KiB swap.

While observing the output of top, the second line below the command top, we can see the Tasks (outlined in red). Tasks in top either have a running, sleep, stopped or zombie state. How many running tasks do you see?

 

The console output displays the tasks.  The task can either be in a running, sleep, stopped, or zombie state.

Figure: The outline in red is the Tasks output from the top command. The command prompt shows 93 total tasks, 1 running, 48 sleeping, 0 stopped, and 0 zombie tasks.

To quit top, hit q and press ENTER.

You can also run top with the following options to find the usage and version information:

top -hv
 

Task 4: Exercise - Create a Cron Job
In this exercise, you will create a cron job that will create an audit file with ##### to cover all csv files:

Note:
You may have to use sudo to complete this exercise if you are not root.

Remember that cron is a command that runs a task on a regular basis at a specified time. This command maintains the list of tasks to run in a crontab file, which you create in this task. You create a job that creates the audit file with ##### in order to cover all .csv files. When you enter the crontab -e command, you are taken to an editor where you then enter a list of steps of what the cron daemon will run. The crontab file includes six fields: minutes, hour, day of month (DOM), month (MON), day of Week (DOW), and command (CMD). These fields can also be denoted with asterisks. Once this command runs, you can verify your work.

To validate that you are in the /home/ec2-user/companyA folder, enter pwd and press Enter.

To create a cron job that creates the audit file with ##### to cover all .csv files, enter sudo crontab -e and press Enter to enter the default text editor.

Press i to enter insert mode, and press Enter.

For the first line, enter SHELL=/bin/bash and press the Space bar.

For the second line, enter PATH=/usr/bin:/bin:/usr/local/bin and press Enter.

For the third line, enter MAILTO=root and press Enter.

For the last line, enter 0 * * * * ls -la $(find .) | sed -e 's/..csv/#####.csv/g' > /home/ec2-user/companyA/SharedFolders/filteredAudit.csv

Your terminal should look like the following image:

![The terminal window shows the establishment of a cron job. The cron job is used to create an audit file.](images/cron.jpg)

*Figure: In the terminal, it shows how the cron job with the SHELL, PATH, MAILTO, and a script that was referenced earlier in the lab.*
To save and close the file, press ESC. Then enter :wq and press Enter.
To validate your work, enter sudo crontab -l and press Enter. Inspect the crontab file to ensure that it matches the text exactly, as the following output shows:
![The terminal window show output from the command sudo crontab -l ](images/installed-cron.jpg)

*Figure: A validated cron job is shown by entering the command sudo crontab -l. The output of the command will be from the file that was entered from earlier in the lab.*
 

