Managing Services - Monitoring
Note

All labs rely on previous courseware and lab information.

 

Objectives
In this lab, you will:

Check the status of the service httpd to ensure that it is running, and that you can make an http connection to the local host IP address

You will also learn how to monitor your Amazon Linux 2 EC2 instance 

Using the Linux top command
Using AWS CloudWatch


cd ~/Downloads
user@users-MacBook-Pro-2 Downloads % chmod 400 labsuser.pem
user@users-MacBook-Pro-2 Downloads % ssh -i labsuser.pem ec2-user@35.91.125.9

Run "sudo yum update" to apply all updates.

[ec2-user@ip-10-0-10-138 ~]$ sudo systemctl status httpd.service

[ec2-user@ip-10-0-10-138 ~]$ sudo systemctl start httpd.service
[ec2-user@ip-10-0-10-138 ~]$ sudo systemctl status httpd.service

[ec2-user@ip-10-0-10-138 ~]$ sudo systemctl stop httpd.service
[ec2-user@ip-10-0-10-138 ~]$ top







AWS service restrictions
In this lab environment, access to AWS services and service actions might be restricted to the ones that are needed to complete the lab instructions. You might encounter errors if you attempt to access other services or perform actions beyond the ones that are described in this lab.

 

Accessing the AWS Management Console
At the top of these instructions, choose Start Lab to launch your lab.
A Start Lab panel opens, and it displays the lab status.

Tip: If you need more time to complete the lab, choose the Start Lab button again to restart the timer for the environment.

Wait until you see the message Lab status: ready, then close the Start Lab panel by choosing the X.

At the top of these instructions, choose AWS.
This opens the AWS Management Console in a new browser tab. The system will automatically log you in.

Tip: If a new browser tab does not open, a banner or icon is usually at the top of your browser with a message that your browser is preventing the site from opening pop-up windows. Choose the banner or icon and then choose Allow pop ups.

Arrange the AWS Management Console tab so that it displays along side these instructions. Ideally, you will be able to see both browser tabs at the same time so that you can follow the lab steps more easily.

 

Task 1: Use SSH to connect to an Amazon Linux EC2 instance
In this task, you will connect to a Amazon Linux EC2 instance. You will use an SSH utility to perform all of these operations. The following instructions vary slightly depending on whether you are using Windows or Mac/Linux.

 Windows Users: Using SSH to Connect
 These instructions are specifically for Windows users. If you are using macOS or Linux, skip to the next section.

Select the Details drop-down menu above these instructions you are currently reading, and then select Show. A Credentials window will be presented.

Select the Download PPK button and save the labsuser.ppk file.
Typically your browser will save it to the Downloads directory.

Make a note of the PublicIP address.

Then exit the Details panel by selecting the X.

Download  PuTTY to SSH into the Amazon EC2 instance. If you do not have PuTTY installed on your computer, download it here.

Open putty.exe

Configure your PuTTY session by following the directions in the following link: Connect to your Linux instance using PuTTY

Windows Users: Select here to skip ahead to the next task.


 

macOS  and Linux  Users
These instructions are specifically for Mac/Linux users. If you are a Windows user, skip ahead to the next task.

Select the Details drop-down menu above these instructions you are currently reading, and then select Show. A Credentials window will be presented.

Select the Download PEM button and save the labsuser.pem file.

Make a note of the PublicIP address.

Then exit the Details panel by selecting the X.

Open a terminal window, and change directory cd to the directory where the labsuser.pem file was downloaded. For example, if the labuser.pem file was saved to your Downloads directory, run this command:

cd ~/Downloads
Change the permissions on the key to be read-only, by running this command:

chmod 400 labsuser.pem
Run the below command (replace <public-ip> with the PublicIP address you copied earlier).
Alternatively, return to the EC2 Console and select Instances. Check the box next to the instance you want to connect to and in the Description tab copy the IPv4 Public IP value.:

ssh -i labsuser.pem ec2-user@<public-ip>
Type yes when prompted to allow the first connection to this remote SSH server.
Because you are using a key pair for authentication, you will not be prompted for a password.


 

Task 2: Check the Status of the httpd Service
Httpd is the service for the Apache http server that is installed on your host. This is a lightweight web server like the ones that run your favorite websites ( think let's .... say amazon.com ) . In this exercise you check the status of the httpd service, and start it using the systemctl command and verify the service is working.

Helpful Hint

You may have to use sudo to complete this exercise if you are not root.

Check the status of the httpd service by using the systemctl commands as shown below and pressing ENTER

sudo systemctl status httpd.service
Expected Output:

![The command prompt shows the output after entering sudo systemctl status httpd.service.](images/Httpd_Service_Inactive.png)

*Figure: The command sudo systemctl status httpd.service and the output says that the httpd service section is inactive (dead).*
 

This indicates that the **httpd** service is **loaded**, which means it is installed and ready to work but is **inactive**.
So the next step is to start it
Check the status of the httpd service by using the systemctl commands as shown below and pressing ENTER

sudo systemctl start httpd.service
Check again the status of the httpd service by using the systemctl commands as shown below and pressing ENTER

sudo systemctl status httpd.service
Expected Output

![The command prompt shows the output after entering sudo systemctl status httpd.service.](images/Httpd_Service_Active.png)

*Figure: The command sudo systemctl status httpd.service and the output says that the httpd service section is active (running).*
    

Now that the httpd is running, let's check it works correctly. Open a new tab on your browser and enter : http://<publicip> . Replace <publicip> with the public ip that you retrieved at the beginning of the course.

Expected Output

![Image shows a browser with the Apache HTTP Server Test page open.](images/http_test_page.png)

*Figure: When httpd is successfully running, an Apache Test page will apear with general information about the proper operation of the Apache HTTP server.*
 

You can now stop the service by entering the command below and pressing ENTER

sudo systemctl stop httpd.service
 

Task 3: Monitoring a Linux EC2 instance
In this exercise you will use Linux commands to monitor the Amazon Linux2 EC2 instance. You will also open the AWS Console and log into CloudWatch to see how this service can provide you with data to monitor your instance.

Helpful Hint

You may have to use sudo to complete this exercise if you are not root.

Display the list of running processes by entering the command below and pressing ENTER

top
Expected Output

![Image shows the output of the top command with normal cpu usage.](images/top_1.png)

*Figure: When running the command top, the output will show the current running processes and resource usages.*
Top displays the processes currently running as well as the resource usage like CPU usage and memory usage. Hit **Q** to exit and return to the shell.
In the next step you are going to run a script that simulates a workload on the CPU.
Run the stress.sh script that simulates a heavy workload on the EC2 instance by entering the following command and pressing ENTER

./stress.sh & top
As in step 1, display the list of running processes by entering the top command and pressing ENTER

Expected Output

Image shows the output of the top command with a heavy cpu load.

Figure: The command prompt shows a high CPU usage after running a script. It shows the user as ec2-user the percentage of CPU at 14-14.3 and the command used was stress.

 

You can see that the process you just ran has a high CPU usage. The script is designed to run for 6 minutes, before stopping.

In the next steps you open the **AWS Management Console** and start the **AWS CloudWatch** application that will give you better insight into you EC2 instance.
On the top right of you screen select theAWS button. This displays the AWS Management Console in a new tab.

In the Search bar on the top of the screen, enter CloudWatch and press ENTER.

Expected Output

The search bar on the AWS console with the word CloudWatch entered.

The AWS console includes a search bar that you can use to search for services.

 

On the left section of the navigation pane, select Dashboard, then select Automatic dashboards. In the Automatic dashboards list, select EC2

Expected Output

The image shows the AWS CloudWatch dashboards.

Figure: The CloudWatch dashboards shows CloudWatch Events, CloudWatch Logs, and EC2 as the top three dashboards.

 

This opens up the EC2 dashboard created for you by AWS.   

Expected Output

Image shows the CloudWatch EC2 Dashboard and the reporting graphs for the account's EC2 instances.

Figure: The graphs shown are CPU Utilization, DiskReadBytes, DiskReadOps, DiskWriteBytes, DiskWriteOps, and NetworkIn for the account's EC2 instances.

 

You can see that by default the **EC2 CloudWatch dashboard** displays several metrics such as the CPU utilization, Disk reads and writes.... 

You can see a spike in the CPU utilization that matches the time when you started the stress script earlier.

> **Note**
>
> Dashboards are customizable so you can add or remove widgets, 
> reorganize them, customize colors... **AWS CloudWatch** offers many 
> more features such as alarms or events triggers that you will discover 
> later that makes it a key **AWS Service** to monitor your applications
> in real time. Update the 5 minutes average to 1 second to second review 
> updates more quickly. 
Wait 5 minutes and go back to the AWS CloudWatch dashboard. You see that the CPU utilization dropped

Expected Output

Image shows the AWS CloudWatch CPU Utilization:Average. The graph shows the initial spike in CPU utilization and then a drop.

Figure: The graph shown is the CPU Utilization Average. In this average, the highest percent it reaches is 62.6 percent at around 8 minutes and hovers around 33 percent then drops back down right aftger the 9 minute mark.  

> **Note**
>
> By default AWS CloudWatch aggregates data for 5 minutes before processing them. This is setup that can be changed 
 
